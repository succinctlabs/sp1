name: Testing Suite (Prover)

on:
  workflow_dispatch:
    inputs:
      cpu_workloads:
        description: "list of cpu workloads to run"
        required: true
      cuda_workloads:
        description: "list of cuda workloads to run"
        required: true
      network_workloads:
        description: "list of network workloads to run"
        required: true
  merge_group:
  # pull_request:
  #   branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-
  cancel-in-progress: false

jobs:
  test-cpu:
    if: ${{ github.event.inputs.cpu_workloads != null || github.event_name != 'workflow_dispatch' }}
    strategy:
      fail-fast: false
      matrix:
        workload: ${{ github.event_name == 'workflow_dispatch' && fromJSON(github.event.inputs.cpu_workloads) || fromJSON('["fibonacci-17k", "ssz-withdrawals", "tendermint", "rsp-20526624", "rsa", "regex", "chess", "json", "blobstream-01j6z63fgafrc8jeh0k12gbtvw", "blobstream-01j6z95bdme9svevmfyc974bja", "blobstream-01j6z9ak0ke9srsppgywgke6fj", "vector-01j6xsv35re96tkgyda115320t", "vector-01j6xzy366ff5tbkzcrs8pma02", "vector-01j6y06de0fdaafemr8b1t69z3", "raiko-a7-10"]') }}
    name: ${{ matrix.workload }} (cpu)
    runs-on:
      [
        "runs-on",
        "runner=64cpu-linux-x64",
        "spot=false",
        "run-id=${{ github.run_id }}",
      ]
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_S3 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_S3 }}
          aws-region: us-west-2

      - name: Copy files from S3
        run: |
          mkdir -p workdir
          aws s3 cp s3://sp1-testing-suite/${{ matrix.workload }}/program.bin workdir/program.bin
          aws s3 cp s3://sp1-testing-suite/${{ matrix.workload }}/stdin.bin workdir/stdin.bin

      - name: Install SP1 toolchain from repo
        run: |
          cargo run -p sp1-cli -- prove install-toolchain
          cd crates/cli
          cargo install --locked --force --path .
          cargo clean

      - name: Install m4
        run: |
          sudo apt-get install m4

      - name: Run sp1-perf
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release -p sp1-perf -- --program workdir/program.bin --stdin workdir/stdin.bin --mode cpu
        env:
          RUST_LOG: info
          RUSTFLAGS: -Copt-level=3 -Ctarget-cpu=native
          RUST_BACKTRACE: 1

  test-cuda:
    if: ${{ github.event.inputs.cuda_workloads != null || github.event_name != 'workflow_dispatch' }}
    strategy:
      fail-fast: false
      matrix:
        workload: ${{ github.event_name == 'workflow_dispatch' && fromJSON(github.event.inputs.cuda_workloads) || fromJSON('["fibonacci-17k", "ssz-withdrawals", "tendermint", "rsp-20526624", "rsa", "regex", "chess", "json", "blobstream-01j6z63fgafrc8jeh0k12gbtvw", "blobstream-01j6z95bdme9svevmfyc974bja", "blobstream-01j6z9ak0ke9srsppgywgke6fj", "vector-01j6xsv35re96tkgyda115320t", "vector-01j6xzy366ff5tbkzcrs8pma02", "vector-01j6y06de0fdaafemr8b1t69z3", "raiko-a7-10"]') }}
    name: ${{ matrix.workload }} (gpu)
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    runs-on:
      [
        "runs-on",
        "family=g6.4xlarge",
        "hdd=200",
        "ami=ami-0a63dc9cb9e934ba3",
        "spot=false",
        "run-id=${{ github.run_id }}",
      ]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_S3 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_S3 }}
          aws-region: us-west-2

      - name: Copy files from S3
        run: |
          mkdir -p workdir
          aws s3 cp s3://sp1-testing-suite/${{ matrix.workload }}/program.bin workdir/program.bin
          aws s3 cp s3://sp1-testing-suite/${{ matrix.workload }}/stdin.bin workdir/stdin.bin

      - name: Install SP1 toolchain from repo
        run: |
          cargo run -p sp1-cli -- prove install-toolchain
          cd crates/cli
          cargo install --locked --force --path .
          cargo clean

      - name: Install m4
        run: |
          sudo apt-get install m4

      - name: Run sp1-perf
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release -p sp1-perf -- --program workdir/program.bin --stdin workdir/stdin.bin --mode cuda
        env:
          RUST_LOG: debug
          RUSTFLAGS: -Copt-level=3 -Ctarget-cpu=native
          RUST_BACKTRACE: 1
          SP1_PROVER: cuda

  test-network:
    if: ${{ fromJSON(github.event.inputs.network_workloads)[0] != null }}
    strategy:
      fail-fast: false
      matrix:
        workload: ${{ fromJSON(github.event.inputs.network_workloads) }}
    name: ${{ matrix.workload }} (network)
    runs-on:
      [
        "runs-on",
        "runner=16cpu-linux-x64",
        "spot=false",
        "run-id=${{ github.run_id }}",
      ]
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_S3 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_S3 }}
          aws-region: us-west-2

      - name: Copy files from S3
        run: |
          mkdir -p workdir
          aws s3 cp s3://sp1-testing-suite/${{ matrix.workload }}/program.bin workdir/program.bin
          aws s3 cp s3://sp1-testing-suite/${{ matrix.workload }}/stdin.bin workdir/stdin.bin

      - name: Clean Cargo cache
        uses: actions-rs/cargo@v1
        with:
          command: clean

      - name: Install SP1 toolchain from repo
        run: |
          cargo run -p sp1-cli -- prove install-toolchain
          cd crates/cli
          cargo install --locked --force --path .
          cargo clean

      - name: Run sp1-perf
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --release -p sp1-perf --features "native-gnark" -- --program workdir/program.bin --stdin workdir/stdin.bin --mode network
        env:
          RUST_LOG: info
          VERIFY_VK: false
          RUSTFLAGS: -Copt-level=3 -Ctarget-cpu=native
          RUST_BACKTRACE: 1
          SP1_PROVER: network
          SP1_PRIVATE_KEY: ${{ secrets.SP1_PRIVATE_KEY }}
          NETWORK_PRIVATE_KEY: ${{ secrets.NETWORK_PRIVATE_KEY }}
          NETWORK_RPC_URL: "https://rpc.production.succinct.xyz" 
