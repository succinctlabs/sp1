name: PR

on:
  push:
    branches: [main, dev]
  pull_request:
    branches:
      - "**"
    paths:
      - "crates/**"
      - "examples/**"
      - "Cargo.toml"
      - ".github/workflows/**"
  merge_group:

env:
  SP1_CI_IN_PROGRESS: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-x86:
    name: Test (x86-64)
    runs-on:
      [
        runs-on,
        runner=64cpu-linux-x64,
        spot=false,
        disk=large,
        "run-id=${{ github.run_id }}",
      ]
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}

      - name: Install SP1 toolchain from repo
        run: |
          cargo run -p sp1-cli -- prove install-toolchain
          cd crates/cli
          cargo install --force --locked --path .
          cargo clean

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          toolchain: 1.81.0
          args: --all-targets --all-features --tests

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          toolchain: 1.81.0
          args: --release --features native-gnark --workspace --exclude sp1-verifier
        env:
          RUSTFLAGS: -Copt-level=3 -Cdebug-assertions -Coverflow-checks=y -Cdebuginfo=0 -C target-cpu=native
          RUST_BACKTRACE: 1
          SP1_DEV: 1

  test-arm:
    name: Test (ARM)
    runs-on:
      [
        runs-on,
        runner=64cpu-linux-arm64,
        spot=false,
        disk=large,
        "run-id=${{ github.run_id }}",
      ]
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}

      - name: Install SP1 toolchain from repo
        run: |
          cargo run -p sp1-cli -- prove install-toolchain
          cd crates/cli
          cargo install --force --locked --path .
          cargo clean

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          toolchain: 1.81.0
          args: --all-targets --all-features --tests

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          toolchain: 1.81.0
          args: --release --features native-gnark --workspace --exclude sp1-verifier
        env:
          RUSTFLAGS: -Copt-level=3 -Cdebug-assertions -Coverflow-checks=y -Cdebuginfo=0 -C target-cpu=native
          RUST_BACKTRACE: 1
          SP1_DEV: 1

  test-verifier:
    name: Test Verifier Crate
    runs-on:
      [
        runs-on,
        runner=64cpu-linux-arm64,
        spot=false,
        disk=large,
        "run-id=${{ github.run_id }}",
      ]
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}

      - name: Install SP1 toolchain from repo
        run: |
          cargo run -p sp1-cli -- prove install-toolchain
          cd crates/cli
          cargo install --locked --force --path .
          cargo clean

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          toolchain: 1.81.0
          args: --all-targets --all-features --tests

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          toolchain: 1.81.0
          args: --release --package sp1-verifier
        env:
          RUSTFLAGS: -Copt-level=3 -Cdebug-assertions -Coverflow-checks=y -Cdebuginfo=0 -C target-cpu=native
          RUST_BACKTRACE: 1

  lint:
    name: Formatting & Clippy
    runs-on: [runs-on, runner=16cpu-linux-x64, disk=large, "run-id=${{ github.run_id }}"]
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}

      - name: Install SP1 toolchain from repo
        run: |
          cargo run -p sp1-cli -- prove install-toolchain
          cd crates/cli
          cargo install --force --locked --path .
          cargo clean

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
        env:
          CARGO_INCREMENTAL: 1

      - name: Check test-artifacts
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: -p test-artifacts
        env:
          CARGO_INCREMENTAL: 1

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --all-targets -- -D warnings -A incomplete-features
        env:
          CARGO_INCREMENTAL: 1

  check:
    name: Cargo Check
    runs-on: [runs-on, runner=16cpu-linux-x64, disk=large, "run-id=${{ github.run_id }}"]
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}

      - name: Install SP1 toolchain from repo
        run: |
          cargo run -p sp1-cli -- prove install-toolchain
          cd crates/cli
          cargo install --force --locked --path .
          cargo clean

      - name: Check workspace no features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace --all-targets --no-default-features

      - name: Check workspace with default features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace --all-targets

      - name: Check workspace with all features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace --all-targets --all-features

  examples:
    name: Examples
    runs-on:
      [
        runs-on,
        runner=64cpu-linux-x64,
        disk=large,
        spot=false,
        "run-id=${{ github.run_id }}",
      ]
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}

      - name: Install SP1 toolchain from repo
        run: |
          cargo run -p sp1-cli -- prove install-toolchain
          cd crates/cli
          cargo install --force --locked --path .
          cargo clean

      - name: Run cargo fmt
        run: |
          cd ./examples/
          cargo fmt --all -- --check

      - name: Run cargo check
        run: |
          cd ./examples/
          cargo check --all-targets --all-features

      - name: Run cargo clippy
        run: |
          cd ./examples/

  typos:
    name: Spell Check
    runs-on: [runs-on, runner=16cpu-linux-x64, disk=large, "run-id=${{ github.run_id }}"]
    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}

      - name: Check all typos
        uses: crate-ci/typos@master
        with:
          write_changes: true

      - uses: getsentry/action-git-diff-suggestions@main
        with:
          message: typos

  check-verifier-no-std:
    name: Check Verifier `no_std`
    runs-on: [runs-on, runner=16cpu-linux-x64, disk=large, "run-id=${{ github.run_id }}"]
    timeout-minutes: 10
    strategy:
      fail-fast: false
    steps:
      - name: Checkout Actions Repository
        uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}
  
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: riscv32imac-unknown-none-elf
          
      - name: Install target support
        run: rustup target add riscv32imac-unknown-none-elf
        
      - name: Check build
        run: cargo check --target riscv32imac-unknown-none-elf --no-default-features -p sp1-verifier

  lock-files:
    name: "Check lock files"
    runs-on:
      [
        runs-on,
        cpu=64,
        ram=256,
        family=m7i+m7a,
        disk=large,
        image=ubuntu22-full-x64,
        spot=false,
        "run-id=${{ github.run_id }}",
      ]    
    env:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - name: "Checkout sources"
        uses: "actions/checkout@v4"

      - name: Setup CI
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}

      - name: "Remove lock files"
        run: |
          find -name Cargo.lock -type f -exec rm {} \;

      # We need the SP1 toolchain to be installed in order to build test-artifacts
      - name: Install SP1 toolchain
        run: |
          cargo run -p sp1-cli -- prove install-toolchain

      - name: "Build SP1 without lock files"
        run: |
          cargo build --all --all-targets
          
      - name: "Build examples without lock files"
        run: |
          cd examples
          cargo build --all --all-targets

  build-in-host:
    name: "Build patches and zkvm in host"
    runs-on: [runs-on, runner=16cpu-linux-x64, disk=large, "run-id=${{ github.run_id }}"]
    steps:
      - name: "Checkout sources"
        uses: "actions/checkout@v4"

      - name: "Setup CI"
        uses: ./.github/actions/setup
        with:
          pull_token: ${{ secrets.PRIVATE_PULL_TOKEN }}

      - name: "Build programs in host"
        run: |
          cd ./patch-testing/build-host
          cargo build